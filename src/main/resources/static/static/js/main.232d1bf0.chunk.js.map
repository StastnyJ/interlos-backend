{"version":3,"sources":["utils/ApiService.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["formatUrl","url","params","undefined","Object","keys","filter","k","map","Array","isArray","p","encodeURIComponent","toString","join","ApiService","_apiUrl","apiUrl","this","options","startsWith","substring","basicFetch","headers","data","rawBody","method","body","JSON","stringify","file","formData","FormData","append","fetch","then","res","ok","text","t","success","catch","error","statusText","initReq","Promise","resolve","reject","a","result","status","api","Init","App","useState","parse","localStorage","getItem","history","setHistory","actCode","setActCode","isLoading","setLoading","darkMode","setDarkMode","openedChR","setOpenedChR","alertShown","setAlertShown","alertText","setAlertText","alertSeverity","setAlertSeverity","saveCode","val","setItem","saveHistory","newHistory","theme","createMuiTheme","palette","type","primary","main","CssBaseline","Container","maxWidth","TextField","value","onChange","e","target","multiline","label","rows","variant","fullWidth","style","display","Button","color","disabled","length","onClick","post","replace","response","includes","code","flexGrow","dm","Typography","Table","TableBody","h","i","Fragment","TableRow","TableCell","align","IconButton","_","ind","aria-label","Delete","Publish","chr","Search","colSpan","Snackbar","anchorOrigin","vertical","horizontal","open","autoHideDuration","onClose","Alert","severity","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","contentType","get","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.232d1bf0.chunk.js","sourcesContent":["interface FetchOptions {\n  success: (data: any) => void;\n  error: (message: string) => void;\n}\n\nconst formatUrl = (url: string, params?: { [index: string]: any }) => {\n  if (params === undefined) return url;\n  return `${url}?${Object.keys(params)\n    .filter((k) => params[k] !== null && params[k] !== undefined)\n    .map((k) => {\n      if (Array.isArray(params[k])) {\n        return params[k].map((p: any) => `${k}=${encodeURIComponent(p.toString())}`).join(\"&\");\n      }\n      return `${k}=${encodeURIComponent(params[k].toString())}`;\n    })\n    .join(\"&\")}`;\n};\n\nclass ApiService {\n  private _apiUrl: string = \"\";\n\n  public Init(apiUrl: string) {\n    this._apiUrl = apiUrl;\n  }\n\n  public async get(url: string, params?: { [index: string]: any }, options?: FetchOptions) {\n    if (url.startsWith(\"/\")) url = url.substring(1);\n    const initReq: RequestInit = {\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    };\n    basicFetch(initReq, `${this._apiUrl}${url}`, params, options);\n  }\n\n  public async post(url: string, params: { [index: string]: any }, data?: any, options?: FetchOptions, rawBody?: boolean) {\n    if (url.startsWith(\"/\")) url = url.substring(1);\n    const initReq: RequestInit = {\n      method: \"post\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: rawBody === true ? data : JSON.stringify(data),\n    };\n    basicFetch(initReq, `${this._apiUrl}${url}`, params, options);\n  }\n\n  public async put(url: string, params?: { [index: string]: any }, data?: any, options?: FetchOptions) {\n    if (url.startsWith(\"/\")) url = url.substring(1);\n    const initReq: RequestInit = {\n      method: \"put\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(data),\n    };\n\n    basicFetch(initReq, `${this._apiUrl}${url}`, params, options);\n  }\n\n  public async delete(url: string, params?: { [index: string]: any }, data?: any, options?: FetchOptions) {\n    if (url.startsWith(\"/\")) url = url.substring(1);\n    const initReq: RequestInit = {\n      method: \"delete\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(data),\n    };\n\n    basicFetch(initReq, `${this._apiUrl}${url}`, params, options);\n  }\n\n  public async uploadFile(url: string, file: File, params?: { [index: string]: any }, options?: FetchOptions) {\n    if (url.startsWith(\"/\")) url = url.substring(1);\n    const formData = new FormData();\n    formData.append(\"file\", file);\n    fetch(formatUrl(`${this._apiUrl}${url}`, params), {\n      method: \"post\",\n      body: formData,\n    }).then((res) => {\n      if (res.ok) {\n        res\n          .text()\n          .then((t) => options?.success(t))\n          .catch(() => options?.error(\"\"));\n      } else {\n        options?.error(res.statusText);\n      }\n    });\n  }\n}\n\nfunction basicFetch(initReq: RequestInit, url: string, params?: { [index: string]: any }, options?: FetchOptions) {\n  if (options === undefined) options = { error: () => {}, success: () => {} };\n\n  return new Promise(async (resolve, reject) => {\n    fetch(formatUrl(url, params), initReq)\n      .then((res) => {\n        if (res.ok) {\n          res\n            .text()\n            .then((result) => {\n              options?.success(result);\n              resolve(result);\n            })\n            .catch(() => {\n              options?.success(null);\n              resolve(null);\n            });\n        } else {\n          options?.error(res.statusText + \" [\" + res.status + \"]\");\n          resolve(res.statusText + \" [\" + res.status + \"]\");\n        }\n      })\n      .catch((error) => {\n        options?.error(error.toString());\n        reject(error.toString());\n      });\n  });\n}\n\nconst apiUrl = \"/\";\n\nconst api: ApiService = new ApiService();\n\napi.Init(apiUrl);\n\nexport { api, apiUrl };\n","import React, { useState } from \"react\";\nimport {\n  Button,\n  Container,\n  IconButton,\n  MuiThemeProvider,\n  createMuiTheme,\n  Snackbar,\n  Table,\n  TableBody,\n  TableCell,\n  TableRow,\n  TextField,\n  Typography,\n  CssBaseline,\n} from \"@material-ui/core\";\nimport { api } from \"./utils/ApiService\";\nimport { Alert, Color } from \"@material-ui/lab\";\nimport { Delete, Publish, Search } from \"@material-ui/icons\";\n\ntype historyType = { code: string; response: string }[];\n\nfunction App() {\n  const [history, setHistory] = useState<historyType>(JSON.parse(localStorage.getItem(\"codeHistory\") || \"[]\"));\n  const [actCode, setActCode] = useState(localStorage.getItem(\"actCode\") || \"\");\n  const [isLoading, setLoading] = useState(false);\n  const [darkMode, setDarkMode] = useState<boolean>(JSON.parse(localStorage.getItem(\"darkMode\") || \"false\"));\n\n  const [openedChR, setOpenedChR] = useState<string[]>([]);\n\n  const [alertShown, setAlertShown] = useState(false);\n  const [alertText, setAlertText] = useState(\"\");\n  const [alertSeverity, setAlertSeverity] = useState<Color>(\"warning\");\n\n  const saveCode = (val: string) => {\n    localStorage.setItem(\"actCode\", val);\n    setActCode(val);\n  };\n\n  const saveHistory = (newHistory: historyType) => {\n    localStorage.setItem(\"codeHistory\", JSON.stringify(newHistory));\n    setHistory(newHistory);\n  };\n\n  const saveDarkMode = (dm: boolean) => {\n    localStorage.setItem(\"darkMode\", JSON.stringify(dm));\n    setDarkMode(dm);\n  };\n\n  const evaluateCode = () => {\n    setLoading(true);\n    api.post(\n      \"/eval\",\n      {},\n      actCode.replace(/[\\s]*/g, \"\"),\n      {\n        success: (response: string) => {\n          setAlertShown(true);\n          setAlertSeverity(response.includes(\"Heslo\") ? \"success\" : \"warning\");\n          setAlertText(response);\n          saveHistory([...history, { code: actCode, response: response }]);\n          setLoading(false);\n        },\n        error: () => {\n          setAlertShown(true);\n          setAlertSeverity(\"error\");\n          setAlertText(\"Při vyhodnocování došlo k chybě. Zkuste to později a případně kontaktujte některého z organizátorů\");\n          setLoading(false);\n        },\n      },\n      true\n    );\n  };\n\n  return (\n    <MuiThemeProvider\n      theme={createMuiTheme({\n        palette: {\n          type: darkMode ? \"dark\" : \"light\",\n          primary: {\n            main: \"#1976d2\",\n          },\n        },\n      })}\n    >\n      <CssBaseline />\n      <Container maxWidth=\"lg\">\n        <br />\n        <br />\n        <TextField\n          value={actCode}\n          onChange={(e) => saveCode(e.target.value)}\n          multiline\n          label=\"Zde napiš svůj příkaz.\"\n          rows={8}\n          variant=\"outlined\"\n          fullWidth\n        />\n        <br />\n        <br />\n        <div style={{ display: \"flex\" }}>\n          <Button color=\"primary\" disabled={isLoading || actCode.length === 0} variant=\"contained\" onClick={evaluateCode}>\n            {isLoading ? \"Vyhodnocuji\" : \"Odeslat příkaz\"}\n          </Button>\n          <div style={{ flexGrow: 1 }}></div>\n          <Button onClick={() => saveDarkMode(!darkMode)}>{darkMode ? \"Light mode\" : \"Dark mode\"}</Button>\n        </div>\n        {history && history.length > 0 && (\n          <>\n            <br />\n            <br />\n            <br />\n            <Typography variant=\"h6\">Historie</Typography>\n            <br />\n            <Table>\n              <TableBody>\n                {history.map((h, i) => (\n                  <React.Fragment key={i.toString() + h.code}>\n                    <TableRow>\n                      <TableCell>{i}</TableCell>\n                      <TableCell>{h.response}</TableCell>\n                      <TableCell align=\"right\">\n                        <IconButton\n                          onClick={() => {\n                            saveHistory(history.filter((_, ind) => ind !== i));\n                            setOpenedChR([]);\n                          }}\n                          aria-label=\"delete\"\n                        >\n                          <Delete color=\"error\" />\n                        </IconButton>\n                        <IconButton onClick={() => saveCode(h.code)} aria-label=\"delete\">\n                          <Publish color=\"primary\" />\n                        </IconButton>\n                        <IconButton\n                          onClick={() =>\n                            openedChR.includes(i.toString() + h.code)\n                              ? setOpenedChR(openedChR.filter((chr) => chr !== i.toString() + h.code))\n                              : setOpenedChR([...openedChR, i.toString() + h.code])\n                          }\n                          aria-label=\"delete\"\n                        >\n                          <Search />\n                        </IconButton>\n                      </TableCell>\n                    </TableRow>\n                    {openedChR.includes(i.toString() + h.code) && (\n                      <TableRow>\n                        <TableCell colSpan={3} align=\"center\">\n                          {h.code}\n                        </TableCell>\n                      </TableRow>\n                    )}\n                  </React.Fragment>\n                ))}\n              </TableBody>\n            </Table>\n            <br />\n            <br />\n            <Button color=\"secondary\" onClick={() => saveHistory([])}>\n              Smazat historii\n            </Button>\n          </>\n        )}\n\n        <Snackbar\n          anchorOrigin={{ vertical: \"top\", horizontal: \"center\" }}\n          open={alertShown}\n          autoHideDuration={6000}\n          onClose={() => setAlertShown(false)}\n        >\n          <Alert variant=\"filled\" onClose={() => setAlertShown(false)} severity={alertSeverity}>\n            {alertText}\n          </Alert>\n        </Snackbar>\n      </Container>\n    </MuiThemeProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\nserviceWorker.register();\n"],"sourceRoot":""}